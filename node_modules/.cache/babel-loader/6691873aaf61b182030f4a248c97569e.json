{"ast":null,"code":"import * as React from 'react';\nimport { parseMutationFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\n\nfunction useIsMutating(arg1, arg2, arg3) {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const mutationCache = queryClient.getMutationCache();\n  return useSyncExternalStore(React.useCallback(onStoreChange => mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)), [mutationCache]), () => queryClient.isMutating(filters), () => queryClient.isMutating(filters));\n}\n\nexport { useIsMutating };","map":{"version":3,"mappings":";;;;;AAuBO,SAASA,aAAT,CACLC,IADK,EAELC,IAFK,EAGLC,IAHK,EAIG;EACR,MAAM,CAACC,OAAD,EAAUC,OAAO,GAAG,EAApB,IAA0BC,uBAAuB,CAACL,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAvD;EAEA,MAAMI,WAAW,GAAGC,cAAc,CAAC;IAAEC,OAAO,EAAEJ,OAAO,CAACI;EAAnB,CAAD,CAAlC;EACA,MAAMC,aAAa,GAAGH,WAAW,CAACI,gBAAZJ,EAAtB;EAEA,OAAOK,oBAAoB,CACzBC,KAAK,CAACC,WAAND,CACGE,aAAD,IACEL,aAAa,CAACM,SAAdN,CAAwBO,aAAa,CAACC,UAAdD,CAAyBF,aAAzBE,CAAxBP,CAFJG,EAGE,CAACH,aAAD,CAHFG,CADyB,EAMzB,MAAMN,WAAW,CAACY,UAAZZ,CAAuBH,OAAvBG,CANmB,EAOzB,MAAMA,WAAW,CAACY,UAAZZ,CAAuBH,OAAvBG,CAPmB,CAA3B;AASD","names":["useIsMutating","arg1","arg2","arg3","filters","options","parseMutationFilterArgs","queryClient","useQueryClient","context","mutationCache","getMutationCache","useSyncExternalStore","React","useCallback","onStoreChange","subscribe","notifyManager","batchCalls","isMutating"],"sources":["/home/leandro/Projects/react-app/node_modules/@tanstack/react-query/src/useIsMutating.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport {\n  notifyManager,\n  MutationKey,\n  MutationFilters,\n  parseMutationFilterArgs,\n} from '@tanstack/query-core'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}